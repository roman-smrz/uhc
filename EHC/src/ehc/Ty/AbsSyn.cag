%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Abstract syntax for Ty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[doesWhat doclatex
%%]

%%[(9 hmtyinfer || hmtyast) haddock
There are some conventions/restrictions on the structure of types that are not enforced
by the abstract syntax:

Encoding of prove-constraints:
  concrete syntax:
    {! impls !} -> ty
  abstract syntax:
    Ty_App (Ty_App (Ty_Con "->") (Ty_Impls impls)) ty

Encoding of assume-constraints:
  concrete syntax:
    (ty, {! pred1 !}, ..., {! predn !})
  abstract syntax:
    Ty_Ext (... (Ty_Ext ty (prod m+1) (Ty_Pred pred_1) ) ...) (prod m+n) (Ty_Pred pred_n)
  
  In other words: the predicates are at the outset of a product, pred_n "more outermost"
  than pred_{n-1}.
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top level interface
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer || hmtyast).TyAGItf
DATA TyAGItf
  | AGItf       ty              : Ty
%%]

%%[(10 hmtyinfer || hmtyast)
DATA LabelAGItf
  | AGItf       lab            	: Label
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type structure: core part, used to represent types in both TyCore and during type inference
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer || hmtyast) haddock
The basic alternatives encode the following:
- Con: data type constructors, including tuple constructors
- App: application to 1 argument, for example 'a -> b' is encoded as (App (App -> a) b)
- Any: representing Bot/Top depending on context: (1) unknown expected type, (2) error type
%%[[2
- Var: type variables
%%][3
- Var: type variables, including a category: plain tyvars, fixed tyvars (aka skolems)
%%]]
%%]

%%[(1 hmtyinfer || hmtyast).Ty
DATA Ty
  | Con         nm              : {HsName}
  | App         func            : Ty
                arg             : Ty
%%]

%%[(1 hmtyinfer || hmtyast)
DATA Ty
  | Ann         ann             : TyAnn
                ty              : Ty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Debugging aid
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The role of this alternative is only to mark a place where st has gone wrong, to be able to track this
%%[(1 hmtyinfer || hmtyast)
DATA Ty
  | Dbg         info            : {String}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Annotations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer || hmtyast)
DATA TyAnn
  | Empty
%%[[4
  | Strictness      s               : Strictness
%%]]
%%[[4
  | Mono		-- enforce predicative binding when matching
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type structure: part used by type inference
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Inference specific variant of quantification and tyvar
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer || hmtyast).Ty
DATA Ty
  | Any
%%]

%%[(2 hmtyinfer || hmtyast).TyVar
DATA Ty
  | Var         tv              : {TyVarId}
%%]

%%[(3 hmtyinfer || hmtyast).TyVar -2.TyVar
DATA Ty
  | Var         tv              : {TyVarId}
                categ           : TyVarCateg

DATA TyVarCateg
  | Plain											-- plain type variables
  | Fixed											-- fixed, i.e. cannot be bound during type matching/fitsIn
%%[[9
  | Meta											-- tvar for reasoning about the typelevel, not on/in the typelevel; for CHR rules
%%]]
%%]

%%[(3 hmtyinfer || hmtyast).Quant
DATA Ty
  | TBind
%%[[4
				qu              : TyQu
%%]]
  				tv              : {TyVarId}
%%[[6
				l1              : {Ty}	-- 1 (or more, if MetaLev > 0) meta level higher, and its kind/sort/...
%%]]
                ty              : Ty
%%]

%%[(7 hmtyinfer || hmtyast).Ty
DATA Ty
  | Ext         ty              : Ty
                nm              : {HsName}
                extTy           : Ty
%%]

%%[(9 hmtyinfer || hmtyast).Ty
DATA Ty
  | Pred        pr              : Pred
%%]

%%[(11 hmtyinfer || hmtyast)
DATA Ty
  | Lam         tv              : {TyVarId}
                ty              : Ty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Quantifiers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[doesWhatTyQu doclatex
Quantifiers: forall & exists

A mlev == 0 means: quantify over the immediate meta of ...,
e.g.
\begin{itemize}
\item
0: quantify over a type in a type for a value.
\item
1: quantify over a kind in a type for a value.
\end{itemize}

Plain quantifiers indicate binding only
%%]

%%[4
DATA TyQu
  | Forall		mlev			: MetaLev
  | Exists		mlev			: MetaLev
%%[[8
  | Plain		mlev			: MetaLev
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 hmtyinfer || hmtyast)
DATA Pred
  | Class       ty              : Ty
  | Pred        ty              : Ty
%%]

%%[(10 hmtyinfer || hmtyast)
DATA Label
  | Lab			nm              : HsName
%%]

%%[(10 hmtyinfer || hmtyast)
DATA Pred
  | Lacks       ty              : Ty
                lab             : Label
%%]

%%[(13 hmtyinfer || hmtyast)
DATA Pred
  | Arrow       args            : PredSeq
                res             : Pred

DATA PredSeq
  | Cons        hd              : Pred
                tl              : PredSeq
  | Nil
%%]

%%[(31 hmtyinfer || hmtyast)
DATA Pred
  | Eq          tyL : Ty
                tyR : Ty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicates: implicit parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 hmtyinfer || hmtyast).Ty
DATA Ty
  | Impls       impls           : Impls

DATA Impls
  | Tail        iv              : {ImplsVarId}
                proveOccs		: {[ImplsProveOcc]}
  | Cons        iv              : {ImplsVarId}
                pr              : Pred
                pv              : {PredOccId}
%%[[99
                prange          : {Range}
%%]]
                proveOccs		: {[ImplsProveOcc]}
                tl              : Impls
  | Nil
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CHR specific
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 hmtyinfer || hmtyast)
DATA Pred
  | Var         pv              : TyVarId
%%]

%%[(10 hmtyinfer || hmtyast)
DATA Label
  | Var			lv              : LabelVarId		
%%]

%%[(13 hmtyinfer || hmtyast)
DATA PredSeq
  | Var         av              : TyVarId

DATA Pred
  | Preds       seq             : PredSeq
%%]

RowSplit is not used, but left in for now:

%%[(10 hmtyinfer || hmtyast)
%%]
DATA Pred
  | RowSplit	ty				: Ty				
  				exts			: RowExts

%%[(10 hmtyinfer || hmtyast)
%%]
DATA RowExts										
  | Exts		exts			: {AssocL HsName Ty}
  | Var			ev              : UID

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Experimental stuff
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(4_2 hmtyinfer || hmtyast).TyBoth
DATA Ty
  | Both        tv              : {TyVarId}
                tyL             : TyL

TYPE TyL        =   [Ty]
%%]

%%[(4_2 hmtyinfer || hmtyast).TyAlts
DATA Ty
  | Alts        tv              : {TyVarId}
                tyL             : TyPlusL
%%]

%%[(6_4 hmtyinfer || hmtyast)
DATA TyVarCateg
  | Exist
%%]

Adds an annotation to the type expression. The annotation can be added at any
place, though typical places of an annotation are just above a type variable
and type constructor.

Normal type inference doesn't add these annotations. We infuse these annotations
to a Ty, after type inference has been performed. We've added the annotations
in such a way that a computation on a Ty that does not need annotations, can
just behave as if they do not exist and let copy-rules do the remainder.

%%[(7_2 hmtyinfer || hmtyast).annotation
DATA Ty
  | Ann         ann             : {Annotation Ty}
                ty              : Ty
%%]

Type constructors are special in our case. It is either an expanded type
constructor, exposing the contents of the data type it represents, or a
truncated one, hiding the contents. Expansions means that a data type is
unfolded given it's type arguments. Expansion should be tightly controlled,
because it could lead easily to enourmous types, or not terminate.

Note: We will not expand a data type without constructors. It is useless
      since basic annotation works already for that.

%%[(7_2 hmtyinfer || hmtyast).annotationExp
DATA Ty
  | ExpTyCon    constrs         : TyExpConstrs
                args            : {[TyVarId]}
                ty              : Ty
    
  | TruncTyCon  anns            : {Annotations Ty}
                ty              : Ty

TYPE TyExpConstrs = [TyExpConstr]

DATA TyExpConstr
  | Constr      nm              : {HsName}
                fields          : TyExpFields

TYPE TyExpFields = [TyExpField]

DATA TyExpField
  | Field       ty              : Ty
%%]

%%[(40 hmtyinfer || hmtyast).Ty
DATA Ty
  | Equal       tv              : {TyVarId}
                ty              : Ty
%%]


%%[(7 hmtyinfer).Ty
DATA Ty
  | IterApp     iter            : {LinExpr TyVarId Integer}
                func            : Ty
                arg             : Ty
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type plus additional info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(4_2 hmtyinfer || hmtyast).TyPlus
DATA TyPlus
  | Ty          ty              : Ty
                hardness        : {TyHardness}
                offering        : {TyNeed}
%%]

%%[(9_1 hmtyinfer || hmtyast).TyPlus -4_1.TyPlus
DATA TyPlus
  | Ty          ty              : Ty
                plv             : {TyPlusId}
%%]

%%[(4_2 hmtyinfer || hmtyast).TyPlusL
TYPE TyPlusL    =   [TyPlus]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SET's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer || hmtyast)
SET AllTyTy
  = Ty
%%[[4_2
    TyL TyPlus TyPlusL
%%]]
%%[[7_2
    TyExpConstrs TyExpConstr TyExpFields TyExpField
%%]]
%%]

%%[(1 hmtyinfer || hmtyast)
SET AllTy
  = AllTyTy
%%[[9
    Pred Impls
%%]]
%%[[10
%%]]
%%[[13
    PredSeq
%%]]
%%]
    RowExts

%%[(1 hmtyinfer || hmtyast)
SET AllTyAndFlds
  = AllTy
    TyAnn
%%[[3
    TyVarCateg
%%]]
%%[[4
    TyQu
%%]]
%%[[10
    Label
%%]]
%%]

%%[(1 hmtyinfer || hmtyast)
SET AllTyAGItf
  = TyAGItf
%%[[10
    LabelAGItf
%%]]
%%]

